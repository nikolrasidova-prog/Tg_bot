import os
import json
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

# ===============================
# –í–°–¢–ê–í–¨ –°–í–û–ô –ë–û–¢ –¢–û–ö–ï–ù –∏ ADMIN_ID –í –≠–¢–ò –ü–ï–†–ï–ú–ï–ù–ù–´–ï
# ===============================
# –ù–ï –≤—Å—Ç–∞–≤–ª—è–π —Ç–æ–∫–µ–Ω –ø—Ä—è–º–æ –≤ –∫–æ–¥, –ª—É—á—à–µ –Ω–∞ Render:
# BOT_TOKEN = 8248333706:AAEwKH69lYXXmqXuF_PuaPO-rwbBhaei510
# ADMIN_ID = 6563977013
# ===============================

BOT_TOKEN = os.getenv("BOT_TOKEN")  # —Å—é–¥–∞ –Ω–∞ Render —Å—Ç–∞–≤–∏—à—å BOT_TOKEN
PARTNER_LINK = os.getenv("PARTNER_LINK", "https://partner-link.com")
ADMIN_ID = os.getenv("ADMIN_ID")     # —Å—é–¥–∞ —Å—Ç–∞–≤–∏—à—å —Å–≤–æ–π Telegram ID –Ω–∞ Render

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

profiles = [
    {"name": "–ê–Ω–Ω–∞", "age": 28, "text": "–ò—â—É –æ–±—â–µ–Ω–∏–µ –∏ –Ω–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ üòä"},
    {"name": "–ï–ª–µ–Ω–∞", "age": 29, "text": "–õ—é–±–ª—é –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö, –∂–¥—É –æ–±—â–µ–Ω–∏—è!"},
    {"name": "–ú–∞—Ä–∏–Ω–∞", "age": 30, "text": "–ò—â—É —Å–µ—Ä—å—ë–∑–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ ‚ù§Ô∏è"},
    {"name": "–û–ª—å–≥–∞", "age": 31, "text": "–õ—é–±–ª—é –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å, –ø—Ä–∏–≥–ª–∞—à–∞—é –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!"},
    {"name": "–¢–∞—Ç—å—è–Ω–∞", "age": 32, "text": "–í–µ—Å—ë–ª–∞—è –∏ –æ—Ç–∫—Ä—ã—Ç–∞—è, –ø–∏—à–∏—Ç–µ!"},
    {"name": "–ù–∞—Ç–∞–ª—å—è", "age": 33, "text": "–ì–æ—Ç–æ–≤–∞ –∫ –Ω–æ–≤—ã–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞–º!"},
    {"name": "–ò—Ä–∏–Ω–∞", "age": 34, "text": "–õ—é–±–ª—é –∫–æ—Ñ–µ –∏ –≤–µ—á–µ—Ä–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ ‚òï"},
    {"name": "–°–≤–µ—Ç–ª–∞–Ω–∞", "age": 35, "text": "–ò—â—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ üòä"},
    {"name": "–í–∏–∫—Ç–æ—Ä–∏—è", "age": 36, "text": "–ñ–¥—É –Ω–æ–≤—ã—Ö –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π –∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤!"},
    {"name": "–ê–Ω–∞—Å—Ç–∞—Å–∏—è", "age": 37, "text": "–õ—é–±–ª—é –∫–∏–Ω–æ –∏ –ø—Ä–æ–≥—É–ª–∫–∏ –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ"},
    {"name": "–Æ–ª–∏—è", "age": 38, "text": "–ü–∏—à—É —Å–∞–º–∞, –±—É–¥—É —Ä–∞–¥–∞ –æ–±—â–µ–Ω–∏—é!"},
    {"name": "–ö—Å–µ–Ω–∏—è", "age": 39, "text": "–í–µ—Å—ë–ª–∞—è –∏ –∞–∫—Ç–∏–≤–Ω–∞—è, –∏—â—É –¥—Ä—É–∑–µ–π –∏ –æ–±—â–µ–Ω–∏–µ"},
    {"name": "–û–∫—Å–∞–Ω–∞", "age": 40, "text": "–•–æ—á—É –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ –ª—é–¥—å–º–∏!"},
    {"name": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞", "age": 42, "text": "–õ—é–±–ª—é –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏ –Ω–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞"},
    {"name": "–î–∞—Ä—å—è", "age": 45, "text": "–û—Ç–∫—Ä—ã—Ç–∞ –∫ –æ–±—â–µ–Ω–∏—é –∏ –Ω–æ–≤—ã–º –¥—Ä—É–∑—å—è–º"},
]

USERS_FILE = "users.json"

def load_users():
    if not os.path.exists(USERS_FILE):
        return []
    with open(USERS_FILE, "r") as f:
        return json.load(f)

def save_users(users):
    with open(USERS_FILE, "w") as f:
        json.dump(users, f)

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    users = load_users()
    if message.from_user.id not in users:
        users.append(message.from_user.id)
        save_users(users)

    text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤.\n–í—ã–±–∏—Ä–∞–π –∞–Ω–∫–µ—Ç—É –Ω–∏–∂–µ –∏ –ø–∏—à–∏ –∂–µ–Ω—â–∏–Ω–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É.\n"
    keyboard = types.InlineKeyboardMarkup()
    for profile in profiles:
        btn = types.InlineKeyboardButton(
            text=f"{profile['name']}, {profile['age']}",
            url=PARTNER_LINK
        )
        keyboard.add(btn)
    await message.answer(text, reply_markup=keyboard)

@dp.message_handler(commands=["broadcast"])
async def cmd_broadcast(message: types.Message):
    if str(message.from_user.id) != str(ADMIN_ID):
        await message.reply("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    users = load_users()
    args = message.get_args()
    if not args:
        await message.reply("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã: /broadcast –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏")
        return

    for user_id in users:
        try:
            await bot.send_message(user_id, args)
        except:
            pass
    await message.reply(f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
